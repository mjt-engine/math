{"version":3,"file":"dividePoint.js","sourceRoot":"","sources":["../src/dividePoint.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,QAAQ,EAAE,MAAM,YAAY,CAAC;AACtC,OAAO,EAAE,QAAQ,EAAE,MAAM,YAAY,CAAC;AACtC,OAAO,EAAE,QAAQ,EAAE,MAAM,YAAY,CAAC;AACtC,OAAO,EAAE,QAAQ,EAAE,MAAM,YAAY,CAAC;AACtC,OAAO,EAAE,QAAQ,EAAE,MAAM,YAAY,CAAC;AAEtC,OAAO,EAAE,OAAO,EAAE,MAAM,WAAW,CAAC;AACpC,OAAO,EAAE,OAAO,EAAE,MAAM,WAAW,CAAC;AACpC,OAAO,EAAE,OAAO,EAAE,MAAM,WAAW,CAAC;AACpC,OAAO,EAAE,OAAO,EAAE,MAAM,WAAW,CAAC;AACpC,OAAO,EAAE,OAAO,EAAE,MAAM,WAAW,CAAC;AAEpC,MAAM,CAAC,MAAM,WAAW,GAAG,CAAC,CAAQ,EAAE,CAAQ,EAAS,EAAE;IACvD,IAAI,QAAQ,CAAC,CAAC,CAAC,IAAI,QAAQ,CAAC,CAAC,CAAC,EAAE,CAAC;QAC/B,OAAO,OAAO,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;IACvB,CAAC;IACD,IAAI,QAAQ,CAAC,CAAC,CAAC,IAAI,QAAQ,CAAC,CAAC,CAAC,EAAE,CAAC;QAC/B,OAAO,OAAO,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;IACvB,CAAC;IACD,IAAI,QAAQ,CAAC,CAAC,CAAC,IAAI,QAAQ,CAAC,CAAC,CAAC,EAAE,CAAC;QAC/B,OAAO,OAAO,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;IACvB,CAAC;IACD,IAAI,QAAQ,CAAC,CAAC,CAAC,IAAI,QAAQ,CAAC,CAAC,CAAC,EAAE,CAAC;QAC/B,OAAO,OAAO,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;IACvB,CAAC;IACD,IAAI,QAAQ,CAAC,CAAC,CAAC,IAAI,QAAQ,CAAC,CAAC,CAAC,EAAE,CAAC;QAC/B,OAAO,OAAO,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;IACvB,CAAC;IACD,MAAM,IAAI,KAAK,CAAC,8CAA8C,CAAC,CAAC;AAClE,CAAC,CAAC","sourcesContent":["import { isPoint0 } from \"./isPoint0\";\nimport { isPoint1 } from \"./isPoint1\";\nimport { isPoint2 } from \"./isPoint2\";\nimport { isPoint3 } from \"./isPoint3\";\nimport { isPoint4 } from \"./isPoint4\";\nimport { Point } from \"./type/Point\";\nimport { divide4 } from \"./divide4\";\nimport { divide3 } from \"./divide3\";\nimport { divide2 } from \"./divide2\";\nimport { divide1 } from \"./divide1\";\nimport { divide0 } from \"./divide0\";\n\nexport const dividePoint = (a: Point, b: Point): Point => {\n  if (isPoint4(a) && isPoint4(b)) {\n    return divide4(a, b);\n  }\n  if (isPoint3(a) && isPoint3(b)) {\n    return divide3(a, b);\n  }\n  if (isPoint2(a) && isPoint2(b)) {\n    return divide2(a, b);\n  }\n  if (isPoint1(a) && isPoint1(b)) {\n    return divide1(a, b);\n  }\n  if (isPoint0(a) && isPoint0(b)) {\n    return divide0(a, b);\n  }\n  throw new Error(\"dividePoint: points must be of the same type\");\n};\n"]}