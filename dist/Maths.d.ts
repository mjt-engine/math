import { add0 } from "./add0";
import { add1 } from "./add1";
import { add2 } from "./add2";
import { add3 } from "./add3";
import { add4 } from "./add4";
import { addPoint } from "./addPoint";
import { blend } from "./blend";
import { blend0 } from "./blend0";
import { blend1 } from "./blend1";
import { blend2 } from "./blend2";
import { blend3 } from "./blend3";
import { blend4 } from "./blend4";
import { blendPoint } from "./blendPoint";
import { clamp } from "./clamp";
import { distance } from "./distance";
import { distance0 } from "./distance0";
import { distance1 } from "./distance1";
import { distance2 } from "./distance2";
import { distance3 } from "./distance3";
import { distance4 } from "./distance4";
import { distancePoint } from "./distancePoint";
import { distancePoints2 } from "./distancePoints2";
import { divide } from "./divide";
import { divide0 } from "./divide0";
import { divide1 } from "./divide1";
import { divide2 } from "./divide2";
import { divide3 } from "./divide3";
import { divide4 } from "./divide4";
import { isPoint } from "./isPoint";
import { isPoint0 } from "./isPoint0";
import { isPoint1 } from "./isPoint1";
import { isPoint2 } from "./isPoint2";
import { isPoint3 } from "./isPoint3";
import { isPoint4 } from "./isPoint4";
import { isPointObject1 } from "./isPointObject1";
import { isPointObject2 } from "./isPointObject2";
import { isPointObject3 } from "./isPointObject3";
import { isPointObject4 } from "./isPointObject4";
import { isVec } from "./isVec";
import { isVec0 } from "./isVec0";
import { isVec1 } from "./isVec1";
import { isVec2 } from "./isVec2";
import { isVec3 } from "./isVec3";
import { isVec4 } from "./isVec4";
import { jsonToPoint3 } from "./jsonToPoint3";
import { length } from "./length";
import { length0 } from "./length0";
import { length1 } from "./length1";
import { length2 } from "./length2";
import { length3 } from "./length3";
import { length4 } from "./length4";
import { lengthPoint } from "./lengthPoint";
import { lerp } from "./lerp";
import { midPoint2 } from "./midPoint2";
import { midPoint3 } from "./midPoint3";
import { multiply } from "./multiply";
import { multiply0 } from "./multiply0";
import { multiply1 } from "./multiply1";
import { multiply2 } from "./multiply2";
import { multiply3 } from "./multiply3";
import { multiply4 } from "./multiply4";
import { multiplyPoint } from "./multiplyPoint";
import { normalize0 } from "./normalize0";
import { normalize1 } from "./normalize1";
import { normalize2 } from "./normalize2";
import { normalize3 } from "./normalize3";
import { normalize4 } from "./normalize4";
import { point3ToJson } from "./point3ToJson";
import { subtract } from "./subtract";
import { subtract0 } from "./subtract0";
import { subtract1 } from "./subtract1";
import { subtract2 } from "./subtract2";
import { subtract3 } from "./subtract3";
import { subtract4 } from "./subtract4";
import { subtractPoint } from "./subtractPoint";
import { toVec } from "./toVec";
import { toVec0 } from "./toVec0";
import { toVec1 } from "./toVec1";
import { toVec2 } from "./toVec2";
import { toVec3 } from "./toVec3";
import { toVec4 } from "./toVec4";
import { wOf } from "./wOf";
import { xOf } from "./xOf";
import { yOf } from "./yOf";
import { zOf } from "./zOf";
export declare const Maths: {
    toTransform3: (o3: Partial<import(".").Transform3>) => import(".").Transform3;
    add: (a: number, b: number) => number;
    add0: typeof add0;
    add1: typeof add1;
    add2: typeof add2;
    add3: typeof add3;
    add4: typeof add4;
    addPoint: typeof addPoint;
    blend: typeof blend;
    blend0: typeof blend0;
    blend1: typeof blend1;
    blend2: typeof blend2;
    blend3: typeof blend3;
    blend4: typeof blend4;
    blendPoint: typeof blendPoint;
    clamp: typeof clamp;
    contains: (point: import(".").Point, needle: number) => boolean;
    distance: typeof distance;
    distance0: typeof distance0;
    distance1: typeof distance1;
    distance2: typeof distance2;
    distance3: typeof distance3;
    distance4: typeof distance4;
    distancePoint: typeof distancePoint;
    divide: typeof divide;
    divide0: typeof divide0;
    divide1: typeof divide1;
    divide2: typeof divide2;
    divide3: typeof divide3;
    divide4: typeof divide4;
    dividePoint: (a: import(".").Point, b: import(".").Point) => import(".").Point;
    isPoint: typeof isPoint;
    isPoint0: typeof isPoint0;
    isPoint1: typeof isPoint1;
    isPoint2: typeof isPoint2;
    isPoint3: typeof isPoint3;
    isPoint4: typeof isPoint4;
    isPointObject1: typeof isPointObject1;
    isPointObject2: typeof isPointObject2;
    isPointObject3: typeof isPointObject3;
    isPointObject4: typeof isPointObject4;
    isVec: typeof isVec;
    isVec0: typeof isVec0;
    isVec1: typeof isVec1;
    isVec2: typeof isVec2;
    isVec3: typeof isVec3;
    isVec4: typeof isVec4;
    jsonToPoint3: typeof jsonToPoint3;
    length: typeof length;
    length0: typeof length0;
    length1: typeof length1;
    length2: typeof length2;
    length3: typeof length3;
    length4: typeof length4;
    lengthPoint: typeof lengthPoint;
    lerp: typeof lerp;
    lerp0: (a: import(".").Point0, b: import(".").Point0, alpha: number) => import(".").Point0;
    lerp1: (a: import(".").Point1, b: import(".").Point1, alpha: number) => import(".").Point1;
    lerp2: (a: import(".").Point2, b: import(".").Point2, alpha: number) => import(".").Point2;
    lerp3: (a: import(".").Point3, b: import(".").Point3, alpha: number) => import(".").Point3;
    lerp4: (a: import(".").Point4, b: import(".").Point4, alpha: number) => import(".").Point4;
    lerpPoint: (a: import(".").Point, b: import(".").Point, alpha: number) => number | import(".").PointObject1 | import(".").Vec1 | import(".").Vec2 | import(".").Vec3 | import(".").Vec4 | undefined;
    midPoint2: typeof midPoint2;
    midPoint3: typeof midPoint3;
    multiply: typeof multiply;
    multiply0: typeof multiply0;
    multiply1: typeof multiply1;
    multiply2: typeof multiply2;
    multiply3: typeof multiply3;
    multiply4: typeof multiply4;
    multiplyPoint: typeof multiplyPoint;
    normalize0: typeof normalize0;
    normalize1: typeof normalize1;
    normalize2: typeof normalize2;
    normalize3: typeof normalize3;
    normalize4: typeof normalize4;
    normalizePoint: (point: import(".").Point) => import(".").Point | undefined;
    point3ToJson: typeof point3ToJson;
    scaler: (scale: number) => (value: number) => number;
    scaler0: (scale: import(".").Point0) => (value: import(".").Point0) => import(".").Point0;
    scaler1: (scale: import(".").Point1) => (value: import(".").Point1) => import(".").Point1;
    scaler2: (scale: import(".").Point2) => (value: import(".").Point2) => import(".").Point2;
    scaler3: (scale: import(".").Point3) => (value: import(".").Point3) => import(".").Point3;
    scaler4: (scale: import(".").Point4) => (value: import(".").Point4) => import(".").Point4;
    scalerPoint: (scale: import(".").Point) => ((value: import(".").Point0) => import(".").Point0) | ((value: import(".").Point1) => import(".").Point1) | ((value: import(".").Point2) => import(".").Point2) | ((value: import(".").Point3) => import(".").Point3) | ((value: import(".").Point4) => import(".").Point4) | undefined;
    subtract: typeof subtract;
    subtract0: typeof subtract0;
    subtract1: typeof subtract1;
    subtract2: typeof subtract2;
    subtract3: typeof subtract3;
    subtract4: typeof subtract4;
    subtractPoint: typeof subtractPoint;
    toVec: typeof toVec;
    toVec0: typeof toVec0;
    toVec1: typeof toVec1;
    toVec2: typeof toVec2;
    toVec3: typeof toVec3;
    toVec4: typeof toVec4;
    translater: (a: number) => (b: number) => number;
    translater0: (translatePoint: import(".").Point0) => (pos: import(".").Point0) => import(".").Point0;
    translater1: (translatePoint: import(".").Point1) => (pos: import(".").Point1) => import(".").Point1;
    translater2: (translatePoint: import(".").Point2) => (pos: import(".").Point2) => import(".").Point2;
    translater3: (translatePoint: import(".").Point3) => (pos: import(".").Point3) => import(".").Point3;
    translater4: (translatePoint: import(".").Point4) => (pos: import(".").Point4) => import(".").Point4;
    translaterPoint: (translatePoint: import(".").Point) => (position: import(".").Point) => import(".").Point | undefined;
    wOf: typeof wOf;
    xOf: typeof xOf;
    yOf: typeof yOf;
    zOf: typeof zOf;
    aOf: <T>(pointVector: T[]) => T;
    bOf: <T>(pointVector: T[]) => T;
    cOf: <T>(pointVector: T[]) => T;
    dOf: <T>(pointVector: T[]) => T;
    eOf: <T>(pointVector: T[]) => T;
    distancePoints2: typeof distancePoints2;
    includesPoint: (points: import(".").Point[], p: import(".").Point) => boolean;
    removeDuplicatePoints: <P extends import(".").Point>(points: P[]) => P[];
    isEqual: (a: import(".").Point, b: import(".").Point) => boolean;
};
